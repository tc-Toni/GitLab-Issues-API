{
	"info": {
		"_postman_id": "a3f44844-0951-490d-9bbd-f8662e861b87",
		"name": "GitLab Issues API",
		"description": "All the requests in this collection make use of the end points that are available on the GitLab Issues API page.\n\nFor more info go to https://docs.gitlab.com/ee/api/issues.html",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CRUD operations",
			"item": [
				{
					"name": "Create issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95f1a854-2ec8-4dc5-b2b4-0ee206bac5ee",
								"exec": [
									"//  Verify that the response is 201 (Created)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Stop test execution if unexpected response code",
									"if (responseCode.code !== 201) return;",
									"",
									"//  Get the json response so we can set variables or/and check property values",
									"var jsonData = pm.response.json();",
									"",
									"//  Verify that the issue is created",
									"pm.test(\"Issue should be created\", function () {",
									"    pm.expect(jsonData.title).to.eql(\"Issue added with Postman\");",
									"    pm.expect(jsonData.state).to.eql(\"opened\");",
									"});",
									"",
									"//  Verify that the issue is added to the 'Banking App' project",
									"pm.test(\"Issue should be part of the 'Banking App' project\", function () {",
									"    pm.expect(jsonData.project_id).to.eql(Number(pm.environment.get(\"idProject\")));",
									"});",
									"",
									"//  Store the issue iid and author id (as an integer) so that it can be used in following requests",
									"Number(pm.environment.set(\"iidIssue\", jsonData.iid));",
									"Number(pm.environment.set(\"idAuthor\", jsonData.author.id));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/projects/:id/issues?title=Issue added with Postman",
							"host": [
								"{{url}}"
							],
							"path": [
								"projects",
								":id",
								"issues"
							],
							"query": [
								{
									"key": "title",
									"value": "Issue added with Postman"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idProject}}",
									"type": "string"
								}
							]
						},
						"description": "This request tests the creation of a new issue by verifying that issue title and state are present in the response.\nAdditionally it is also verified that the issue is part of the 'Banking App' project."
					},
					"response": []
				},
				{
					"name": "Assign issue to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6e568e7-31cf-466a-b8ea-af01cf2252e2",
								"exec": [
									"//  Verify that the response is 200 (OK)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Stop test execution if unexpected response code",
									"if (responseCode.code !== 200) return;",
									"",
									"//  Get the json response so we can set variables or/and check property values",
									"var jsonData = pm.response.json();",
									"",
									"//  Verify the issue is assigned to user",
									"pm.test(\"Issue is assigned to user\", function () {",
									"    pm.expect(jsonData.assignees[0].id).to.eql(Number(pm.environment.get(\"idUser\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/projects/:id/issues/:issue_iid?assignee_id={{idUser}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"projects",
								":id",
								"issues",
								":issue_iid"
							],
							"query": [
								{
									"key": "assignee_id",
									"value": "{{idUser}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idProject}}",
									"type": "string"
								},
								{
									"key": "issue_iid",
									"value": "{{iidIssue}}",
									"type": "string"
								}
							]
						},
						"description": "This request tests the assigment of an issue to an user by verifying that the assignees id is present in the response."
					},
					"response": []
				},
				{
					"name": "Move issue on board to 'Doing'",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6e568e7-31cf-466a-b8ea-af01cf2252e2",
								"exec": [
									"//  Verify that the response is 200 (OK)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Stop test execution if unexpected response code",
									"if (responseCode.code !== 200) return;",
									"",
									"//  Get the json response so we can set variables or/and check property values",
									"var jsonData = pm.response.json();",
									"",
									"//  When the label 'Doing' is assigned to an issue it is shown on the 'Doing' lane on the project board. 'labels' is an array. In this example the issue contains 2 labels: 'Doing' and 'Login'. Therefore we need to iterate over the array to determine if 'Doing' is one of the labels. If the value 'Doing' is found in the array the boolean true will be assigned to the variable arrayContainsDoing.",
									"var arrayContainsDoing;",
									"",
									"for (var label of jsonData.labels){",
									"    if (label == 'Doing'){",
									"        arrayContainsDoing = true;",
									"    }",
									"}",
									"",
									"//  Verify that the issue is moved to Doing' on the project board",
									"pm.test(\"Issue is moved to 'Doing' on project board\", function () {",
									"    pm.expect(arrayContainsDoing).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/projects/:id/issues/:issue_iid?labels=Doing, Login",
							"host": [
								"{{url}}"
							],
							"path": [
								"projects",
								":id",
								"issues",
								":issue_iid"
							],
							"query": [
								{
									"key": "labels",
									"value": "Doing, Login"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idProject}}",
									"type": "string"
								},
								{
									"key": "issue_iid",
									"value": "{{iidIssue}}",
									"type": "string"
								}
							]
						},
						"description": "In gitlab issues are moved on the board by adding a specific label to the issue.\n\nThis request tests moving an issue to another lane on the board by adding a label and subsequently verifying that the label is present in the response. \n\nAn issue can have multiple labels (array), therefore a for loop is used to verify a specific label is present in the array."
					},
					"response": []
				},
				{
					"name": "Subscribe to issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd0dd5d5-fc17-4dcd-868d-4ad4b09ae5b1",
								"exec": [
									"//  The author of the issue is automatically subscribed to the issue. You can only subscribe once to an issue. Therefore we store both values in variables so we can check if the subscriber is also the author of the issue.",
									"var author =     pm.environment.get(\"idAuthor\");",
									"var subscriber = pm.environment.get(\"idUser\");",
									"",
									"//  If the user is already subscribed to the issue, the status code 304 is returned. Else the user will be subscribed to the issue.",
									"if (author == subscriber) {",
									"    pm.test(\"User is already subscribed to issue\", function () {",
									"        pm.response.to.have.status(304);",
									"        });",
									"    } else {",
									"        pm.test(\"User subscribed to issue\"), function (){",
									"            pm.response.to.have.status(201);",
									"            var jsonData = pm.response.json();",
									"            pm.jsonData.subscribed.to.be(true);",
									"        };",
									"    }",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/projects/:id/issues/:issue_iid/subscribe",
							"host": [
								"{{url}}"
							],
							"path": [
								"projects",
								":id",
								"issues",
								":issue_iid",
								"subscribe"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idProject}}",
									"type": "string"
								},
								{
									"key": "issue_iid",
									"value": "{{iidIssue}}",
									"type": "string"
								}
							]
						},
						"description": "This request tests the subscription to an issue by verifying that issue title and state are present in the response. \n\nA user can only subscribe once to an issue. The author of an issue is automatically subscribed to the issue. Therefore a condition is added which checks if the person we want to subscribe is the same person as the author of the issue. If that is the case a 304 is expected, else we expect a succesfull subscription."
					},
					"response": []
				},
				{
					"name": "Add comment to issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f252c37f-3915-476c-830e-abbad8e59a73",
								"exec": [
									"//  Verify that the response is 201 (Created)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//  Stop test execution if unexpected response code",
									"if (responseCode.code !== 201) return;",
									"",
									"//  Get the json response so we can set variables or/and check property values",
									"var jsonData = pm.response.json();",
									"",
									"//  Verify that the comment is added (.body) and that is part of to the issue (.noteable_iid)",
									"pm.test(\"Comment should be added to issue\", function () {",
									"    pm.expect(jsonData.body).to.eql(\"Note added with Postman\");",
									"    pm.expect(jsonData.noteable_iid).to.eql(Number(pm.environment.get(\"iidIssue\")));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/projects/:id/issues/:issue_iid/notes?body=Note added with Postman",
							"host": [
								"{{url}}"
							],
							"path": [
								"projects",
								":id",
								"issues",
								":issue_iid",
								"notes"
							],
							"query": [
								{
									"key": "body",
									"value": "Note added with Postman"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idProject}}",
									"type": "string"
								},
								{
									"key": "issue_iid",
									"value": "{{iidIssue}}",
									"type": "string"
								}
							]
						},
						"description": "This request tests the adding of a comment to an issue by verifying that the text is present in the response.\nAdditionally it is also verified that the comment is part of the expected issue."
					},
					"response": []
				},
				{
					"name": "Close issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c7d01f1-bde3-49da-aa58-58a8033544f7",
								"exec": [
									"//  Verify that the response is 200 (OK)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Stop test execution if unexpected response code",
									"if (responseCode.code !== 200) return;",
									"",
									"//  Get the json response so we can set variables or/and check property values",
									"var jsonData = pm.response.json();",
									"",
									"//  Verify that the 'state' of the issue is closed.",
									"pm.test(\"Issue should be closed\", function () {",
									"    pm.expect(jsonData.title).to.eql(\"Issue added with Postman\");",
									"    pm.expect(jsonData.state).to.eql(\"closed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/projects/:id/issues/:issue_iid?state_event=close",
							"host": [
								"{{url}}"
							],
							"path": [
								"projects",
								":id",
								"issues",
								":issue_iid"
							],
							"query": [
								{
									"key": "state_event",
									"value": "close"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idProject}}",
									"type": "string"
								},
								{
									"key": "issue_iid",
									"value": "{{iidIssue}}",
									"type": "string"
								}
							]
						},
						"description": "This request tests the closing an issue by verifying that the state of the issue is changed from 'opened' to 'closed'."
					},
					"response": []
				},
				{
					"name": "List all open issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c7cf7ff-f2ad-4ba9-a2aa-9c645f441fb8",
								"exec": [
									"//  Verify that the response is 200 (OK)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//  Stop test execution if unexpected response code",
									"if (responseCode.code !== 200) return;",
									"",
									"//  Get the json response so we can set variables or/and check property values",
									"var jsonData = pm.response.json();",
									"",
									"//  Declare a variable to where we can return a boolean value to in the for loop",
									"var issueOpen;",
									"",
									"//  Loops over all objects (=issues) in the array (=jsonData) and checks the state. If the state is 'opened' the value true is assigned to 'var issueOpen' and the loop continues. As soon as an issue has the state 'closed' the value false is assigned to 'var issueOpen' and the loop ends.",
									"for(i=0; i<jsonData.length; i++){",
									"    console.log(jsonData[i].title); // prints all the issues in the console",
									"    if(jsonData[i].state == \"opened\") {",
									"        issueOpen= true;",
									"    } else {",
									"        issueOpen= false;",
									"        break;",
									"    }",
									"}",
									"",
									"//   Verify that the state off all listed issues is 'opened' by checking that the value of var issueOpen = true",
									"pm.test(\"State of all listed issues should be 'opened'\", function() {",
									"    pm.expect(issueOpen).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/projects/:id/issues?state=opened",
							"host": [
								"{{url}}"
							],
							"path": [
								"projects",
								":id",
								"issues"
							],
							"query": [
								{
									"key": "state",
									"value": "opened"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idProject}}",
									"type": "string"
								}
							]
						},
						"description": "This request tests the slection of all open issues on the board by verifying that the state of all issues in the response is 'opened'.\n\nOriginally there where 6 issues on the board which are all open. In a previous test we added one issue which now is closed. This issue should not be present in the response of this request. To verify this we loop threw the length of the array and check the 'state' of all issues."
					},
					"response": []
				},
				{
					"name": "Delete issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51f7a09c-8755-4e7a-a3f0-e63bef36828e",
								"exec": [
									"//  Verify that the response is 204 (No Content)",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/projects/:id/issues/:issue_iid",
							"host": [
								"{{url}}"
							],
							"path": [
								"projects",
								":id",
								"issues",
								":issue_iid"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idProject}}",
									"type": "string"
								},
								{
									"key": "issue_iid",
									"value": "{{iidIssue}}",
									"type": "string"
								}
							]
						},
						"description": "This request tests deleting an issue by verifying that there is no content in the respeonse."
					},
					"response": []
				},
				{
					"name": "Verify issue deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78f05e0b-2393-43ce-a19c-b88bf5d61148",
								"exec": [
									"// Verify that there are no search results for the issue",
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/projects/:id/issues/:issue_iid",
							"host": [
								"{{url}}"
							],
							"path": [
								"projects",
								":id",
								"issues",
								":issue_iid"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idProject}}",
									"type": "string"
								},
								{
									"key": "issue_iid",
									"value": "{{iidIssue}}",
									"type": "string"
								}
							]
						},
						"description": "Additionally to previous test, this request verifies that the issue is not found when searched for it."
					},
					"response": []
				}
			],
			"description": "Test suite wherein all CRUD operations concerning an issue are tested.\n\nC - POST request\nR - GET request\nU - PUT request\nD - DEL request\n\nAll tests inherit the OAUTH2 authorization of the parent folder."
		},
		{
			"name": "Edge cases",
			"item": [
				{
					"name": "Time estimate",
					"item": [
						{
							"name": "Set invalid time estimate for issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5a2559b-c8bd-43a7-a755-741bb448eb1f",
										"exec": [
											"//  Verify that the response is 400 (Bad request)",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"//  Stop test execution if unexpected response code",
											"if (responseCode.code !== 400) return;",
											"",
											"//  Get the json response so we can set variables or/and check property values",
											"var jsonData = pm.response.json();",
											"",
											"//  Verify that the format is invalid",
											"pm.test(\"Input should be invalid\", function () {",
											"    pm.expect(jsonData.message.time_estimate[0]).to.eql(\"has an invalid format\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/projects/:id/issues/:issue_iid/time_estimate?duration=xx",
									"host": [
										"{{url}}"
									],
									"path": [
										"projects",
										":id",
										"issues",
										":issue_iid",
										"time_estimate"
									],
									"query": [
										{
											"key": "duration",
											"value": "xx"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{idProject}}"
										},
										{
											"key": "issue_iid",
											"value": "{{idEdgeIssue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set minimum time estimate for issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5a2559b-c8bd-43a7-a755-741bb448eb1f",
										"exec": [
											"//  Verify that the response is 200 (OK)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//  Stop test execution if unexpected response code",
											"if (responseCode.code !== 200) return;",
											"",
											"//  Get the json response so we can set variables or/and check property values",
											"var jsonData = pm.response.json();",
											"",
											"//  Verify that the time is set",
											"pm.test(\"Time estimate should be set\", function () {",
											"    pm.expect(jsonData.human_time_estimate).to.eql(\"1s\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/projects/:id/issues/:issue_iid/time_estimate?duration=1s",
									"host": [
										"{{url}}"
									],
									"path": [
										"projects",
										":id",
										"issues",
										":issue_iid",
										"time_estimate"
									],
									"query": [
										{
											"key": "duration",
											"value": "1s"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{idProject}}"
										},
										{
											"key": "issue_iid",
											"value": "{{idEdgeIssue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set maximum time estimate for issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5a2559b-c8bd-43a7-a755-741bb448eb1f",
										"exec": [
											"//  Verify that the response is 200 (OK)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//  Stop test execution if unexpected response code",
											"if (responseCode.code !== 200) return;",
											"",
											"//  Get the json response so we can set variables or/and check property values",
											"var jsonData = pm.response.json();",
											"",
											"//  Verify that the time is set",
											"pm.test(\"Time estimate should be set\", function () {",
											"    pm.expect(jsonData.human_time_estimate).to.eql(\"566mo 1w 3h 11m 59s\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/projects/:id/issues/:issue_iid/time_estimate?duration=10y11m365d23h59s",
									"host": [
										"{{url}}"
									],
									"path": [
										"projects",
										":id",
										"issues",
										":issue_iid",
										"time_estimate"
									],
									"query": [
										{
											"key": "duration",
											"value": "10y11m365d23h59s"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{idProject}}"
										},
										{
											"key": "issue_iid",
											"value": "{{idEdgeIssue}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Due date",
					"item": [
						{
							"name": "Set invalid due date for issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e10052d1-7078-4af7-9e22-2c9c6ee0422f",
										"exec": [
											"//  Verify that the response is 400 (Bad request)",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"//  Stop test execution if unexpected response code",
											"if (responseCode.code !== 400) return;",
											"",
											"//  Get the json response so we can set variables or/and check property values",
											"var jsonData = pm.response.json();",
											"",
											"//  Verify that the fomrat is invalid",
											"pm.test(\"Input should be invalid\", function () {",
											"    pm.expect(jsonData.message.due_date[0]).to.eql(\"has an invalid format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/projects/:id/issues/:issue_iid?due_date=2019-35-35",
									"host": [
										"{{url}}"
									],
									"path": [
										"projects",
										":id",
										"issues",
										":issue_iid"
									],
									"query": [
										{
											"key": "due_date",
											"value": "2019-35-35"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{idProject}}"
										},
										{
											"key": "issue_iid",
											"value": "{{idEdgeIssue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set minimum due date for issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa1c7022-eca7-4048-8bd6-34dbfc4d5828",
										"exec": [
											"//  Verify that the response is 200 (OK)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//  Stop test execution if unexpected response code",
											"if (responseCode.code !== 200) return;",
											"",
											"//  Get the json response so we can set variables or/and check property values",
											"var jsonData = pm.response.json();",
											"",
											"//  Verify that the due date is set",
											"pm.test(\"Due date should be set\", function () {",
											"    pm.expect(jsonData.due_date).to.eql(\"0001-01-01\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/projects/:id/issues/:issue_iid?due_date=0001-01-01",
									"host": [
										"{{url}}"
									],
									"path": [
										"projects",
										":id",
										"issues",
										":issue_iid"
									],
									"query": [
										{
											"key": "due_date",
											"value": "0001-01-01"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{idProject}}"
										},
										{
											"key": "issue_iid",
											"value": "{{idEdgeIssue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set maximumdue date for issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "248f2c79-b64f-485a-b244-f392f6083463",
										"exec": [
											"//  Verify that the response is 200 (OK)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//  Stop test execution if unexpected response code",
											"if (responseCode.code !== 200) return;",
											"",
											"//  Get the json response so we can set variables or/and check property values",
											"var jsonData = pm.response.json();",
											"",
											"//  Verify that the due date is set",
											"pm.test(\"Due date should be set\", function () {",
											"    pm.expect(jsonData.due_date).to.eql(\"9999-12-31\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/projects/:id/issues/:issue_iid?due_date=9999-12-31",
									"host": [
										"{{url}}"
									],
									"path": [
										"projects",
										":id",
										"issues",
										":issue_iid"
									],
									"query": [
										{
											"key": "due_date",
											"value": "9999-12-31"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{idProject}}"
										},
										{
											"key": "issue_iid",
											"value": "{{idEdgeIssue}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Weight",
					"item": [
						{
							"name": "Set invalid weight for issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3dd7b9c-227a-4ac5-a662-e528d8c02c7f",
										"exec": [
											"//  Verify that the response is 400 (Bad request)",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"//  Stop test execution if unexpected response code",
											"if (responseCode.code !== 400) return;",
											"",
											"//  Get the json response so we can set variables or/and check property values",
											"var jsonData = pm.response.json();",
											"",
											"//  Verify that the fomrat is invalid",
											"pm.test(\"Input should be invalid\", function () {",
											"    pm.expect(jsonData.message.weight[0]).to.eql(\"must be greater than or equal to 0\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/projects/:id/issues/:issue_iid?weight=-1",
									"host": [
										"{{url}}"
									],
									"path": [
										"projects",
										":id",
										"issues",
										":issue_iid"
									],
									"query": [
										{
											"key": "weight",
											"value": "-1"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{idProject}}"
										},
										{
											"key": "issue_iid",
											"value": "{{idEdgeIssue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set minimum weight for issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3dd7b9c-227a-4ac5-a662-e528d8c02c7f",
										"exec": [
											"//  Verify that the response is 200 (OK)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//  Stop test execution if unexpected response code",
											"if (responseCode.code !== 200) return;",
											"",
											"//  Get the json response so we can set variables or/and check property values",
											"var jsonData = pm.response.json();",
											"",
											"//  Verify that the weight is set",
											"pm.test(\"Weight should be set\", function () {",
											"    pm.expect(jsonData.weight).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/projects/:id/issues/:issue_iid?weight=0",
									"host": [
										"{{url}}"
									],
									"path": [
										"projects",
										":id",
										"issues",
										":issue_iid"
									],
									"query": [
										{
											"key": "weight",
											"value": "0"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{idProject}}"
										},
										{
											"key": "issue_iid",
											"value": "{{idEdgeIssue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set maximum weight for issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3dd7b9c-227a-4ac5-a662-e528d8c02c7f",
										"exec": [
											"//  Verify that the response is 200 (OK)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//  Stop test execution if unexpected response code",
											"if (responseCode.code !== 200) return;",
											"",
											"//  Get the json response so we can set variables or/and check property values",
											"var jsonData = pm.response.json();",
											"",
											"//  Verify that the weight is set",
											"pm.test(\"Weight should be set\", function () {",
											"    pm.expect(jsonData.weight).to.eql(9999);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/projects/:id/issues/:issue_iid?weight=9999",
									"host": [
										"{{url}}"
									],
									"path": [
										"projects",
										":id",
										"issues",
										":issue_iid"
									],
									"query": [
										{
											"key": "weight",
											"value": "9999"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{idProject}}"
										},
										{
											"key": "issue_iid",
											"value": "{{idEdgeIssue}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Test suite wherein the input values are extreme (minimun or maximum).\n\nAll tests inherit the OAUTH2 authorization of the parent folder.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "103296a7-b658-4592-ac00-cf2c9e469f90",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3142c060-4b7d-43e4-b018-e00d741eb38f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "39c40d7f9e9ac764006a833cd1437cfd9e8cc93f447f9187ec5cd7574a713e77",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d4f1f750-37b5-45d5-9d05-8e3f9e895a23",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "241496d4-c6f4-43c4-85b1-534f0f1eb4ed",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}